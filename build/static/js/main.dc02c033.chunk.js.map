{"version":3,"sources":["header.js","popup.js","person.js","student.js","teacher.js","personFactory.js","school.js","dataSet.js","App.js","index.js"],"names":["Header","className","src","alt","title","this","props","description","React","Component","Popup","strAction1","type","state","popupState","right","rightOrLeftPopup","strAction","strClassName","onClick","e","deletePopup","setState","fullName","birthDateStr","age","education","experience","photoUrl","bind","mountsArr","Person","university","birthDate","Date","popup","undefined","id","popupIsActive","popupRight","parent","target","parentNode","getBoundingClientRect","left","width","event","stopPropagation","getDate","getMonth","today","getFullYear","m","popupStack","Student","course","educationStr","renderPopup","openCard","Teacher","experienceStr","PersonFactory","key","School","limit","schoolList","page","valueForFindOrDrop","formIsVisible","personFactory","dataset","DataSet","object","params","studentOrTeacher","create","push","list","then","forEach","item","enroll","classNameForm","htmlFor","placeholder","value","onChange","inputFullnameOnChange","name","dropPerson","findOnCurrentPage","openFormAdd","prevPage","nextPage","appFullName","addForminputFullnameOnChange","appID","addForminputIDOnChange","size","defaultValue","addFormSelectValue","addFormSelect","appUniversity","addForminputUnivercityOnChange","appExpOrCourse","addForminputExpOrCourseOnChange","appBirthDate","addForminputBirthDateOnChange","addPerson","cancelAddPerson","splice","length","fullNameForDelete","idForDelete","drop","delete","updatePage","dropIndex","findIndex","student","deleteId","alert","fullNameForFind","find","preventDefault","data","options","host","query","url","URL","index","pathname","searchParams","set","fetch","response","json","method","headers","body","JSON","stringify","newData","App","container","school","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc02c033.chunk.js","sourcesContent":["import React from 'react';// import {Component} from './componentsLib.js';\r\nexport class Header extends React.Component {\r\n\t//       constructor(props) {\r\n\t//               super(props);\r\n\t//               // this.props=props;\r\n\t//  }\r\n\t      render() {\r\n\t              return  <div className  =\"information\">\r\n\t                              <img className=\"information__logo\" src=\"img/logo.jpg\" alt=\"Логотип\"/>\r\n\t                              <div className=\"information__title title\" title={this.props.title}>{this.props.title}</div>\r\n\t                              <div className=\"information__subtitle\" title={this.props.description}>{this.props.description}</div>\r\n\t                      </div>\r\n\t      }\r\n\t}\r\n","import React from 'react';\r\nexport class Popup extends React.Component {\r\n        constructor(props) {\r\n                super(props);\r\n                        let strAction1='';\r\n                        switch(this.props.type) {\r\n                        case 'student':\r\n                                strAction1 = 'Учится';\r\n                                break;\r\n                        case 'teacher': \r\n                                strAction1 = 'Работает';\r\n                                break;\r\n                        }\r\n                        this.state = {popupState: props.popupState, right: props.rightOrLeftPopup, strAction: strAction1 };\r\n        }\r\n        render(){\r\n                let strClassName='info-window info-window_active';\r\n                if (this.state.right==true){\r\n                        strClassName='info-window info-window_active info-window_active-right'\r\n                }\r\n                if (this.state.popupState) {\r\n                return <div className={strClassName}>\r\n                                <img className=\"info-window__close-button\" src=\"../img/close.png\" alt=\"кнопка закрыть\" onClick={(e) => {this.props.deletePopup(e); this.setState({popupState: false})}}/>\r\n                                \r\n                                <div className=\"info-window__container\">\r\n                                        <div className=\"info-window__data\">\r\n                                        <div className=\"info-window__title\">{this.props.fullName}</div>\r\n                                        <div className=\"info-window__row\">\r\n                                                <p className=\"info-window__subtitle\">День Рождения</p>\r\n                                                <p className=\"info-window__information\">{this.props.birthDateStr +\", \"+ this.props.age + \" лет\"}</p>\r\n                                        </div>\r\n                                        <div className=\"info-window__row\">\r\n                                                <p className=\"info-window__subtitle info-window__subtitle_education\">{this.state.strAction}</p>\r\n                                                <p className=\"info-window__information info-window__information_education\">{this.props.education || this.props.experience}</p>\r\n                                        </div>\r\n                                        </div>\r\n                                        <img className=\"info-window__photo\" src={this.props.photoUrl} alt=\"Фото + {this.props.fullName}\"/>\r\n                                </div>\r\n                        </div>;\r\n                }\r\n                else return <div></div>\r\n        }\r\n        closePopup(){\r\n                this.setState({popupState: false});\r\n                this.props.deletePopup.bind(null);\r\n        }\r\n}","// import {Popup} from './componentsLib.js';\r\nimport React from 'react';\r\nconst mountsArr = ['января','февраля','марта','апреля','мая','июня','июля','августа','сентября','октября','ноября','декабря'];\r\n\r\nexport class Person extends React.Component{\r\n                        static popupStack = [];\r\n                        constructor(props) {\r\n                                super(props);\r\n                                this.university = this.props.university || '';\r\n                                this.birthDate = new Date(this.props.birthDate) || new Date();\r\n                                this.photoUrl = this.props.photoUrl || '';\r\n                                this.type = 'person';\r\n                                this.popup = undefined;\r\n                                this.state = {\r\n                                        id: this.props.id || 1,\r\n                                        fullName: this.props.fullName || '',\r\n                                        popupIsActive:false, \r\n                                        popupRight: false};    \r\n                        }\r\n                        /**\r\n                         * функция-getter возраста\r\n                         * @returns {string} - возвращает строку даты рождения в формате \"число месяц\", например \"1 июня\"\r\n                         */\r\n                        get birthDateStr() {\r\n                                return `${this.birthDate.getDate()} ${mountsArr[this.birthDate.getMonth()]}`;\r\n                        }\r\n                        /**\r\n                         * функция-getter возраста\r\n                         * @returns {number} - количество полных лет на текущий момент\r\n                         */\r\n                        get age() {\r\n                                let today = new Date();\r\n                                let age = today.getFullYear() - this.birthDate.getFullYear() ;\r\n                                let m = today.getMonth() - this.birthDate.getMonth();\r\n                                if (m < 0 || (m === 0 && today.getDate() < this.birthDate.getDate())) {\r\n                                age--;\r\n                                }\r\n                                return age;\r\n                        }\r\n                        /**\r\n                         * открывает карточку человека, заранее закрывая остальные\r\n                         */\r\n                        openCard(e){\r\n                                //определение положения элемента (открывать попап справа или слева)\r\n                                const parent = e.target.parentNode.parentNode.getBoundingClientRect();\r\n                                const element = e.target.getBoundingClientRect();\r\n                                const x = element.left - parent.left;\r\n                                if (x>parent.width/2){\r\n                                        this.setState({popupIsActive: true, popupRight: true});\r\n                                }\r\n                                this.setState({popupIsActive: true});\r\n                            }\r\n\r\n                        deletePopup(event) {\r\n                                this.setState({popupIsActive: false});\r\n                                event.stopPropagation();\r\n                        }\r\n                }\r\n\r\n","import {Person} from './componentsLib.js';\r\nimport {Popup} from './componentsLib.js';\r\nimport React from 'react';\r\n// import {Popup} from './componentsLib.js';\r\nexport class Student extends Person{\r\n                        constructor(props) {\r\n                                super(props);\r\n                                this.course = props.course || '';\r\n                                this.type = 'student'\r\n                                \r\n                        }\r\n                        /**\r\n                         * функция-getter образования\r\n                         * @returns {string} - возвращает строку информации об образовании в формате \"Университет курс лет\", например \"СевГУ 2 курс\"\r\n                         */\r\n                        get educationStr() {\r\n                                if ((!this.university)&&(!this.course)){\r\n                                        return '';\r\n                                }\r\n                                else {\r\n                                        return (this.university ||'') + \", \" + this.course  + \" курс\";\r\n                                }\r\n                        }\r\n                        renderPopup(){\r\n                                let popup;\r\n                                if (this.state.popupRight){\r\n                                        // console.log(this.state.type);\r\n                                        popup = this.state.popupIsActive ? \r\n                                        <Popup \r\n                                                popupState={ true } \r\n                                                type = {this.type}\r\n                                                rightOrLeftPopup={ true } \r\n                                                fullName={this.state.fullName} \r\n                                                university={this.university} \r\n                                                birthDateStr={this.birthDateStr} \r\n                                                photoUrl={this.photoUrl} \r\n                                                age={this.age} \r\n                                                educationStr = {this.educationStr}\r\n                                                deletePopup={this.deletePopup.bind(this)}/> : \r\n                                        <div></div>;\r\n                                }\r\n                                else\r\n                                        popup = this.state.popupIsActive ? \r\n                                        <Popup \r\n                                                popupState={ true } \r\n                                                type = {this.type}\r\n                                                rightOrLeftPopup={ false } \r\n                                                fullName={this.state.fullName} \r\n                                                university={this.university} \r\n                                                birthDateStr={this.birthDateStr} \r\n                                                photoUrl={this.photoUrl} \r\n                                                age={this.age} \r\n                                                education = {this.educationStr}\r\n                                                deletePopup={this.deletePopup.bind(this)}/> : \r\n                                        <div></div>;\r\n                                return popup;\r\n                        }\r\n                        render() {\r\n                                let popup=this.renderPopup();\r\n                                // this.popup=popup;\r\n                                return <div className=\"column\" id={this.state.id} onClick={this.openCard.bind(this)} >\r\n                                                <img className=\"column__photo\" src={this.photoUrl} alt=\"Фото + {this.fullName}\"/>\r\n                                                <div className=\"column__title\" title=\"Фамилия Имя\">{this.state.fullName}</div>\r\n                                                <div className=\"column__subtitle\" title=\"Образование\">{this.educationStr}</div>\r\n                                                {popup}\r\n                                        </div>\r\n                        }\r\n                }\r\n\r\n\r\n","import {Person} from './componentsLib.js';\r\nimport {Popup} from './componentsLib.js';\r\nimport React from 'react';\r\nexport class Teacher extends Person{\r\n                        constructor(props) {\r\n                                super(props);\r\n                                this.experience = this.props.experience;\r\n                                this.type = 'teacher';\r\n                        }\r\n                        /**\r\n                         * функция-getter опыта\r\n                         * @returns {string} - возвращает строку информации об опыте в формате \"Опыт количество лет лет\", например \"Опыт 2 года\"\r\n                         */\r\n                        get experienceStr() {\r\n                                return \"Опыт \" + this.experience + \" года\";\r\n                        }\r\n                        renderPopup(){\r\n                                let popup;\r\n                                if (this.state.popupRight){\r\n                                        popup = this.state.popupIsActive ? \r\n                                        <Popup \r\n                                                popupState={ true } \r\n                                                type = {this.type}\r\n                                                rightOrLeftPopup={ true } \r\n                                                fullName={this.state.fullName} \r\n                                                university={this.university} \r\n                                                birthDateStr={this.birthDateStr} \r\n                                                photoUrl={this.photoUrl} \r\n                                                age={this.age} \r\n                                                experience = {this.experienceStr}\r\n                                                deletePopup={this.deletePopup.bind(this)}/> : \r\n                                        <div></div>;\r\n                                }\r\n                                else\r\n                                        popup = this.state.popupIsActive ? \r\n                                        <Popup \r\n                                                popupState={ true } \r\n                                                type = {this.type}\r\n                                                rightOrLeftPopup={ false } \r\n                                                fullName={this.state.fullName} \r\n                                                university={this.university} \r\n                                                birthDateStr={this.birthDateStr} \r\n                                                photoUrl={this.photoUrl} \r\n                                                age={this.age} \r\n                                                experience = {this.experienceStr}\r\n                                                deletePopup={this.deletePopup.bind(this)}/> : \r\n                                        <div></div>;\r\n                                return popup;\r\n                        }\r\n                        render() {\r\n                                let popup=this.renderPopup();\r\n                                return <div className=\"column\" id={this.state.id} onClick={this.openCard.bind(this)} >\r\n                                        <img className=\"column__photo\" src={this.photoUrl} alt=\"Фото + {this.fullName}\"/>\r\n                                        <div className=\"column__title\" title=\"Фамилия Имя\">{this.state.fullName}</div>\r\n                                        <div className=\"column__subtitle\" title=\"Опыт\">{this.experienceStr}</div>\r\n                                        {popup}\r\n                                </div>\r\n                }\r\n                }","import {Student, Teacher} from './componentsLib.js';\r\nimport React from 'react';// import {Component} from './componentsLib.js';\r\nexport class PersonFactory {\r\n                        /**\r\n                         * Создание людей на фабрике)))\r\n                         * @param {String} type тип создаваемого человека\r\n                         * @param {Object} options объект со всеми полями будущего студента или преподавателя \r\n                         *  @returns {Object} - объект студента с переданными полями или учителя в зависимости от типа\r\n                         */\r\n                            create(type, props) {\r\n                                switch(type) {\r\n                                    case 'student':{\r\n                                        return <Student \r\n                                        id = {props.id} \r\n                                        key = {props.id} \r\n                                        fullName = {props.fullName} \r\n                                        university = {props.university} \r\n                                        birthDate = {props.birthDate} \r\n                                        photoUrl = {props.photoUrl}\r\n                                        course = {props.course}/>;\r\n                                }\r\n                                    case 'teacher': \r\n                                        return <Teacher \r\n                                        id = {props.id} \r\n                                        key = {props.id} \r\n                                        fullName = {props.fullName} \r\n                                        university = {props.university} \r\n                                        birthDate = {props.birthDate} \r\n                                        photoUrl = {props.photoUrl}\r\n                                        experience = {props.experience}/>;\r\n                                }\r\n                            }\r\n                        }\r\n","import {PersonFactory, DataSet} from './componentsLib.js'; \r\nimport React from 'react';// import {Component} from './componentsLib.js';\r\n\r\nexport class School extends React.Component{\r\n        constructor() { //тут был container\r\n                super();//тут был container\r\n                this.limit = 6;\r\n                this.state = {schoolList : [],\r\n                        page: 1,\r\n                        valueForFindOrDrop: '',\r\n                        formIsVisible: false\r\n                };\r\n                this.personFactory = new PersonFactory();\r\n                this.dataset = new DataSet({\r\n                        object: 'person',\r\n                });\r\n        }\r\n        /**\r\n         * Добавление людей в школу\r\n         * @param {Object} params объект со всеми полями будущего студента или преподавателя \r\n         * @returns {String} - строку об успешном зачислении студента или учителя\r\n         */\r\n        enroll(params) {\r\n                let studentOrTeacher = this.personFactory.create(params.type, params);\r\n                this.state.schoolList.push(studentOrTeacher); \r\n                this.setState({schoolList: this.state.schoolList});\r\n        }\r\n        \r\n\r\n        componentDidMount() {\r\n                this.dataset.list(this.state.page, this.limit)\r\n                .then((list)=>\r\n                {\r\n                        list.forEach((item) => {\r\n                                this.enroll(item);\r\n                        });\r\n                        return list;\r\n                })\r\n        }\r\n        render(){\r\n                let classNameForm = this.state.formIsVisible ? '': 'form-add-person__block_disabled';\r\n                        return <div>\r\n                                <form className=\"form-edit-students\">\r\n                                                <p className=\"form-edit-students__string form-string\">\r\n                                                        <label className=\"form-edit-students__label form-label\" htmlFor=\"input-fullname\">Для поиска на странице введите ФИО</label>\r\n                                                        <input className=\"form-edit-students__input form-input\" id=\"input-fullname\" type = \"text\" placeholder=\"Введите ФИО человека\" value={this.state.valueForFindOrDrop} onChange={this.inputFullnameOnChange.bind(this)}/>\r\n                                                </p>\r\n                                                <p className=\"form-edit-students__string form-string\">\r\n                                                        <input className=\"form-edit-students__button form-button\" type = \"button\" id=\"delete-button\" name=\"delete-button\" value=\"Отчислить/Уволить\" onClick={this.dropPerson.bind(this)}/>\r\n                                                        <input className=\"form-edit-students__button form-button\" type = \"button\" id=\"find-button\" name=\"find-button\" value=\"Найти\" onClick = {this.findOnCurrentPage.bind(this)}/>\r\n                                                        <input className=\"form-edit-students__button form-button\" type = \"button\" id=\"add-button\" name=\"add-button\" value=\"Добавить человека\" onClick={this.openFormAdd.bind(this)}/>\r\n                                                </p>\r\n                                        </form> \r\n                                        <div id=\"students-list\" className=\"list\">\r\n                                                {this.state.schoolList}\r\n                                        </div>\r\n                                        <div className = \"page-buttons\">\r\n                                                <img className = \"page-buttons__item page-button__item_prev\" id=\"prev-page\" src=\"../img/page-button.png\" alt=\"предыдущая страница\" onClick ={this.prevPage.bind(this)}/>\r\n                                                <img className = \"page-buttons__item \" id=\"next-page\" src=\"../img/page-button.png\" alt=\"следующая страница\" onClick = {this.nextPage.bind(this)}/>\r\n                                        </div>  \r\n                                        <div id=\"form-add-person__block\" className={classNameForm}>\r\n                                                <div className=\"b-popup\"> \r\n                                                <form id=\"form-add-person\" className=\"form-add-person\">\r\n                                                        <p className=\"form-add-person__string\">\r\n                                                                <label className=\"form-add-person__label form-label\" htmlFor=\"input-add-fullname\">Введите ФИО</label>\r\n                                                                <input className=\"form-add-person__input form-input\" id=\"input-add-fullname\" type = \"text\" placeholder=\"Введите ФИО человека\" value={this.state.appFullName} onChange={this.addForminputFullnameOnChange.bind(this)}/>\r\n                                                        </p>\r\n                                                        <p className=\"form-add-person__string\">\r\n                                                                <label className=\"form-add-person__label form-label\" htmlFor=\"input-ID\">Введите ID</label>\r\n                                                                <input className=\"form-add-person__input form-input\" id=\"input-ID\" type = \"text\" placeholder=\"Введите ID человека\" value={this.state.appID} onChange={this.addForminputIDOnChange.bind(this)}/>\r\n                                                        </p>\r\n                                                        <p className=\"form-add-person__string\">\r\n                                                                <label className=\"form-add-person__label form-label\" htmlFor=\"select-type\">Выберите тип</label>\r\n                                                                <select id=\"select-type\" className=\"form-select\" size=\"1\" defaultValue=\"teacher\" value={this.state.addFormSelectValue} onChange={this.addFormSelect.bind(this)}>        \r\n                                                                        <option value=\"teacher\">Учитель</option>\r\n                                                                        <option value=\"student\">Студент</option>\r\n                                                                </select>\r\n                                                        </p>\r\n                                                        <p className=\"form-add-person__string\">\r\n                                                                <label className=\"form-add-person__label form-label\" htmlFor=\"input-university\">Введите университет</label>\r\n                                                                <input className=\"form-add-person__input form-input\" id=\"input-university\" type = \"text\" placeholder=\"Введите университет\" value={this.state.appUniversity} onChange={this.addForminputUnivercityOnChange.bind(this)}/>\r\n                                                        </p>\r\n                                                        <p className=\"form-add-person__string\">\r\n                                                                <label className=\"form-add-person__label form-label\" htmlFor=\"input-exp-or-course\">Введите опыт или курс(число)</label>\r\n                                                                <input className=\"form-add-person__input form-input\" id=\"input-exp-or-course\" type = \"text\" placeholder=\"Опыт или курс(число)\" value={this.state.appExpOrCourse} onChange={this.addForminputExpOrCourseOnChange.bind(this)}/>\r\n                                                        </p>\r\n                                                        <p className=\"form-add-person__string\">\r\n                                                                <label className=\"form-add-person__label form-label\" htmlFor=\"input-birthDate\">Введите дату рождения (в формате ГГГГ, ММ, ДД)</label>\r\n                                                                <input className=\"form-add-person__input form-input\" id=\"input-birthDate\" type = \"text\" placeholder=\"1998, 10, 2\" value={this.state.appBirthDate} onChange={this.addForminputBirthDateOnChange.bind(this)}/>\r\n                                                        </p>\r\n                                                        <p className=\"form-add-person__string\">\r\n                                                                <input className=\"form-add-person__button form-button\" type = \"submit\" id=\"add-person-button\" name=\"add-person-button\" value=\"Добавить\" onClick = {this.addPerson.bind(this)}/>\r\n                                                                <input className=\"form-add-person__button form-button\" type = \"button\" id=\"add-person-cancel\" name=\"add-person-cancel\" value=\"Отмена\" onClick = {this.cancelAddPerson.bind(this)}/>\r\n                                                        </p>\r\n                                                </form>   \r\n                                                </div>\r\n                                        </div>         \r\n                                </div>;\r\n        }\r\n        inputFullnameOnChange(event) {\r\n\t\tthis.setState({valueForFindOrDrop: event.target.value});\r\n        }\r\n        addForminputFullnameOnChange(event){\r\n                this.setState({appFullName: event.target.value});\r\n        }\r\n        addForminputIDOnChange(event){\r\n                this.setState({appID: event.target.value});\r\n        }\r\n        addForminputUnivercityOnChange(event){\r\n                this.setState({appUniversity: event.target.value});\r\n        }\r\n        addForminputExpOrCourseOnChange(event){\r\n                this.setState({appExpOrCourse: event.target.value});\r\n        }\r\n        addForminputBirthDateOnChange(event){\r\n                this.setState({appBirthDate: event.target.value});\r\n        }\r\n        addFormSelect(event) {\r\n\t\tthis.setState({addFormSelectValue: event.target.value || event.target.defaultValue});\r\n\t}\r\n        openFormAdd(){\r\n                this.setState({formIsVisible: true});\r\n        }\r\n        updatePage(){\r\n                this.dataset.list(this.state.page, this.limit)\r\n                .then((list)=>\r\n                {\r\n                        this.state.schoolList.splice(0,this.state.schoolList.length);\r\n                        list.forEach((item) => {\r\n                                this.enroll(item);\r\n                        });\r\n                        return list;\r\n                })\r\n        }\r\n\r\n        /**\r\n         * удаление человека со страницы и из БД\r\n         */\r\n        dropPerson(event){\r\n                let fullNameForDelete = this.state.valueForFindOrDrop;\r\n                let idForDelete = this.drop(fullNameForDelete);\r\n                event.stopPropagation();\r\n                \r\n                this.dataset.delete(idForDelete)\r\n                .then(()=>{\r\n                        this.updatePage();\r\n                })\r\n\r\n        }\r\n        /**\r\n         * удаление человека\r\n         *  @returns {Object} - сам объект школы уже без удаленного человека\r\n         */\r\n        drop(fullName) {\r\n                // debugger;\r\n                let dropIndex = this.state.schoolList.findIndex((student) => student.props.fullName === fullName); \r\n                // console.log(dropIndex);\r\n                if (dropIndex > -1) {\r\n                        let deleteId = this.state.schoolList[dropIndex].props.id;\r\n                        this.state.schoolList.splice(dropIndex,1);\r\n                        this.setState({schoolList: this.state.schoolList});\r\n                        return deleteId;\r\n                }\r\n                else {\r\n                        alert(\"Человек с введенными Вами ФИО отсутствует на этой странице, возможно он находится на другой\");\r\n                        return -1;\r\n                }\r\n                \r\n        }\r\n        /**\r\n         * поиск человека на текущей странице (не глобальный поиск, ищет только среди отображенных элементов)\r\n         */\r\n        findOnCurrentPage(){\r\n                let fullNameForFind = this.state.valueForFindOrDrop;\r\n                let student = this.state.schoolList.find((student) => student.props.fullName === fullNameForFind);\r\n                if (student){\r\n                    //    student.setState({popupIsActive: true}); Так нельзя делать, увы       \r\n                }\r\n                else {\r\n                        alert(\"Человек с введенными Вами ФИО отсутствует на этой странице, возможно он находится на другой\");\r\n                }\r\n        }\r\n\r\n        prevPage(event) {\r\n                if (this.state.page>=2) {\r\n                        this.state.page--;\r\n                        this.setState({page: this.state.page});\r\n                        event.stopPropagation();\r\n                        this.updatePage();\r\n                }\r\n                \r\n        }\r\n        nextPage(event) {\r\n                    this.state.schoolList.splice(0,this.state.schoolList.length);\r\n                    this.state.page++;\r\n                    this.dataset.list(this.state.page, this.limit)\r\n                        .then((list)=>\r\n                        {\r\n                                if (list.length>0){\r\n                                        this.setState({page: this.state.page});\r\n                                        list.forEach((item) => {\r\n                                                this.enroll(item);\r\n                                        });\r\n                                }\r\n                                else \r\n                                        this.state.page--; \r\n                                return list;\r\n                        })                    \r\n                    event.stopPropagation();\r\n        }\r\n        addPerson(event){\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                let data = {}\r\n                if(!this.state.addFormSelectValue){ //если не менялся селект, и значит тип это учитель\r\n\r\n                    data = {\r\n                        id: this.state.appID || 1,\r\n                        type: this.state.addFormSelectValue || 'teacher',\r\n                        fullName: this.state.appFullName || '',\r\n                        university: this.state.appUniversity || '',\r\n                        experience: this.state.appExpOrCourse || '',\r\n                        birthDate: this.state.appBirthDate || '',\r\n                        photoUrl: '../img/ava0.jfif'\r\n                    };  \r\n                }\r\n                else {\r\n                    data = {\r\n                        id: this.state.appID || 1,\r\n                        type: this.state.addFormSelectValue || 'student',\r\n                        fullName: this.state.appFullName || '',\r\n                        university: this.state.appUniversity || '',\r\n                        course: this.state.appExpOrCourse || '',\r\n                        birthDate: this.state.appBirthDate || '',\r\n                        photoUrl: '../img/ava0.jfif'\r\n                    }; \r\n                }\r\n                this.dataset.create(data)\r\n                .then(()=>\r\n                {\r\n                        this.updatePage();\r\n                        this.setState({formIsVisible: false});\r\n                })\r\n                \r\n        }\r\n        cancelAddPerson(event){\r\n                event.stopPropagation();\r\n                this.setState({formIsVisible: false});\r\n                }\r\n        }","export class DataSet{\r\n    constructor(options) {\r\n        this.options = {\r\n            host: 'http://localhost:8080/api/',\r\n            // model: options.model,\r\n            object: options.object\r\n        }\r\n    }\r\n/**\r\n * \r\n * @param {*} query \r\n * @param {*} options \r\n * @param {object} params {page:1, limit:5}\r\n */\r\n//     toModel(something){\r\n//         return new (this.options.model)(something);\r\n//     }\r\n    /**\r\n     * \r\n     * @param {string} query специальная часть запроса\r\n     * @param {*} options method,  headers, body\r\n     * @param {object} params {page:1, limit:5}\r\n     * @returns {Promise} ответ от сервера\r\n     */\r\n    query(query, options, params){\r\n        let url = new URL(this.options.host);\r\n        url.pathname += query;\r\n        for (let index in params){\r\n            url.searchParams.set(index, params[index]);\r\n        }\r\n        return fetch(url, options)\r\n            .then( (response) => response.json());\r\n    }\r\n    /**\r\n     * \r\n     * @param {Object} data информация, которую надо добавить в бд\r\n     * @returns {Promise} ответ от сервера\r\n     */\r\n    create(data){\r\n        return this.query(`${this.options.object}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=utf-8'\r\n              },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n    /**\r\n     * @param {Number} id id человека, данные которого необходимо считать\r\n     * @returns {Promise} ответ от сервера\r\n     */\r\n    read(id){\r\n        return this.query(\r\n            `${this.options.object}/${id}`, \r\n            {\r\n                method: 'GET'\r\n            }\r\n        );\r\n        // .then(result => {\r\n        //     return this.toModel(result)\r\n        // });\r\n    }\r\n    /**\r\n     * @param {Number} id id человека, данные которого необходимо изменить\r\n     * @param {Object} newData новая информация информация, которая заменит онформацию о человеке\r\n     * @returns {Promise} ответ от сервера\r\n     */\r\n    update(id, newData){\r\n        return this.query(\r\n            `${this.options.object}/${id}`, \r\n            {\r\n                method: 'PATCH',\r\n                body: newData\r\n            });\r\n    }\r\n    /**\r\n     * @param {Number} id id человека, которого необходимо удалить из бд\r\n     * @returns {Promise} ответ от сервера\r\n     */\r\n    delete(id){\r\n        return this.query(\r\n            `${this.options.object}/${id}`, \r\n            {\r\n                method: 'DELETE',\r\n            });\r\n    }\r\n    /**\r\n     * @param {Number} page страница, которую необходимо открыть\r\n     * @param {Number} limit количество записей на странице\r\n     * @returns {Promise} ответ от сервера\r\n     */\r\n    list(page, limit){\r\n        return this.query(\r\n            `${this.options.object}`, \r\n            {\r\n                method: 'GET'\r\n            },\r\n            {\r\n                '_page': page,\r\n                '_limit': limit\r\n            });\r\n    }\r\n}","import React from 'react';\nimport {Header, School} from './componentsLib.js';\n// import {DataSet} from './dataSet.js'; \n\nclass App extends React.Component{\n                constructor(container){\n                super(container);\n                this.school = new School();\n        }\n        render() {\n\n                return <div>\n                                <Header title='Tensor School' description='Это страница школы Тензор в городе Уфа. Тут вы можете познакомиться с нашими учениками и посмотреть темы занятий.' />\n                                        \n                                <div id=\"container\">\n                                        <School /> \n                                        \n                                </div>\n                                        \n                                        \n                        </div>;    \n        }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('wrapper')\n);\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  // serviceWorker.unregister();\n"],"sourceRoot":""}